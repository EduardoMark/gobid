// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  seller_id, name,
  description, base_price,
  auction_end
) VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateProductParams struct {
	SellerID    uuid.UUID `json:"seller_id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	BasePrice   float64   `json:"base_price"`
	AuctionEnd  time.Time `json:"auction_end"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.SellerID,
		arg.Name,
		arg.Description,
		arg.BasePrice,
		arg.AuctionEnd,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, seller_id, name, description, base_price, auction_end, is_sold, created_at, updated_at FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]*Product, error) {
	rows, err := q.db.Query(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.SellerID,
			&i.Name,
			&i.Description,
			&i.BasePrice,
			&i.AuctionEnd,
			&i.IsSold,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneProductByID = `-- name: GetOneProductByID :one
SELECT id, seller_id, name, description, base_price, auction_end, is_sold, created_at, updated_at FROM products
WHERE id = $1
`

func (q *Queries) GetOneProductByID(ctx context.Context, id uuid.UUID) (*Product, error) {
	row := q.db.QueryRow(ctx, getOneProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.SellerID,
		&i.Name,
		&i.Description,
		&i.BasePrice,
		&i.AuctionEnd,
		&i.IsSold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
